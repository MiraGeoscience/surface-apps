[tool.poetry]
name = "surface-apps"
version = "0.1.0-alpha.1"
license = "MIT"
description = "Find Iso-surfaces in 3D data."
authors = ["Mira Geoscience <support@mirageoscience.com>"]
repository = "https://github.com/MiraGeoscience/surface-apps"
homepage = "https://mirageoscience.com"
readme = "README.rst"
packages = [
     { include = "surface_apps" },
     { include = "surface_apps-assets" },
]

include = [
    "COPYING",
    "COPYING.LESSER",
    "LICENSE",
    "README.rst",
    "THIRD_PARTY_SOFTWARE.rst",
]

# TODO: adjust classifiers
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Natural Language :: English",
]

[tool.poetry.scripts]

[tool.poetry.dependencies]
python = "^3.10, <3.11"

numpy = "~1.26.0"  # also in geoh5py
pydantic = "^2.5.2"  # also in geoh5py
scikit-image = "~0.20.0"
scipy = "~1.14.0"  # also in geoapps-utils
tqdm = "~4.66.1"

## Pip dependencies from Git repositories
#----------------------------------------
#geoh5py = {version = "~0.10.0-alpha.1", source = "pypi", allow-prereleases = true}
geoh5py = {git = "https://github.com/MiraGeoscience/geoh5py.git", rev = "develop"}

#geoapps-utils = {version = "~0.4.0-alpha.1", source = "pypi", allow-prereleases = true}
geoapps-utils = {git = "https://github.com/MiraGeoscience/geoapps-utils.git", rev = "develop"}

## about pip dependencies
# to be specified to work with conda-lock
# - from PyPI: my_package = { version = "1.2.3", source = "pypi" }
# - from URL:
#   - for a tags:   my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/tags/VERSION_TAG.zip#sha256=" }
#   - for a branch: my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/heads/BRANCH.zip#sha256=" }
# Note - conda-lock does not support the syntax: my_package = { git = ... }
#        while poetry2conda supports only { git = "...", tag = "..." }, and not { url = ... }

[tool.conda-lock.dependencies]
## indirect dependencies, forcing them here for installation through Conda not pip
#---------------------------------------------------------------------------------
Pillow = ">=10.3.0, <10.4.0"  # from geoh5py
h5py = ">=3.2.1, <4.0.0"  # from geoh5py

[tool.poetry.group.dev.dependencies]
Pygments = "*"
pylint = "*"
pytest = "*"
pytest-cov = "*"
sphinx = "*"
sphinx-autodoc-typehints = "*"
sphinx-rtd-theme = "*"
tomli = "*"

[tool.conda-lock]
platforms = ['win-64', 'linux-64']
channels = ['conda-forge']

[tool.isort]
profile = "black"

[tool.black]
# defaults are just fine

[tool.mypy]
warn_unused_configs = true
ignore_missing_imports = true
scripts_are_modules = true
show_error_context = true
show_column_numbers = true
check_untyped_defs = true

plugins = [
    "numpy.typing.mypy_plugin",
]

[tool.pytest.ini_options]
#addopts =

[tool.coverage.run]
branch = true
source = ["surface_apps"]

[tool.coverage.report]
exclude_lines = [
    "raise NotImplementedError",
    "pass",
    "if TYPE_CHECKING",
    "pragma: no cover"
]

[tool.coverage.html]
skip_empty = true
skip_covered = true

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"
